struct term{
    int coef;   //계수
    int expo;   //지수
    struct term *next;
};

typedef struct term Term;

typedef struct polynomial{      // 함수 저장하는 구조체
    char name;
    Term *first;
    int size = 0;   //항의 개수
}Polynomial;

Polynomial *polys[MAX_POLYS];   // 다항식들에 대한 포인터의 배열
int n = 0;      // 저장된 다항식의 개수

Term *create_term_instance(){
    Term *t = malloc(sizeof(Term));
    t->coef = 0;
    t->expo = 0;
    return t;
}

Polynomial *create_polynomial_instance(char name){
    Polynomial *ptr_poly = malloc(sizeof(Polynomial));
    ptr_poly->name = name;
    ptr_poly->size = 0;
    ptr_poly->first = NULL;
    return ptr_poly;
}

void add_term(int c, int e, Polynomial *poly){
    if(c==0)
        return;
    
    Term *p = poly->first, *q = NULL;
    
    while(p != NULL && p->expo > e){
        q = p;
        p = p->next;
    }
    
    if(p != NULL && p->expo == e){      //동일 차수의 항이 존재하는 경우
        p->coef += c;
        
        if(p->coef == 0){               // 더헀더니 계수가 0
            if(q==NULL)                 // q의 다음 노드를 삭제한다. 단 q가 NULL이면 첫번째 노드를 삭제한다
                poly->first = p->next; 
            else    
                q->next = p->next;
            poly->size--;
            free(p);
        }
        return;
    }
                                        // 동일한 차수의 항이 존재하지 않는 경우
    Term *term = create_term_instance();
    term->coef = c;
    term->expo = e;
    
    if(q==NULL){
        term->next = poly->first;
        poly->first = term;
    }
    else{
        term->next = p;
        q->next = term;
    }
    (poly->size)++;
