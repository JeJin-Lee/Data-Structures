<원형 큐>

*배열을 꽉 채우지 않는다. 꽉 채우면 꽉 찬 경우와 텅 빈 경우를 구분할 수가 없기 때문!
*배열의 길이가 n이라면 데이터가 n-1개 채워졌을 때, 이를 꽉 찬 것으로 간주!

* enqueue 연산 시, R이 가리키는 위치를 한 칸 이동시킨 다음, R이 가리키는 위치에 데이터를 저장한다.
* dequeue 연산 시, F가 가리키는 위치를 한 칸 이동시킨 다음, F가 가리키는 위치에 저장된 데이터를 반환 및 소멸한다.

#include <stdio.h>
#include <stdlib.h>
#include "CircularQueue.h"

void QueueInit(Queue *pq){
    pq->front = 0;
    pq->rear = 0;
}

int QIsEmpty(Queue *pq){
    if(pq->front == pq->rear)
        return TRUE;
    else
        return FALSE;
}

int NextPosIdx(int pos){
    if(pos == QUE_LEN-1)
        return 0;
    else
        return pos+1;
}

void Enqueue(Queue *pq, Data data){
    if(NextPosIdx(pq->rear) == pq->front){          // 큐가 꽉 찼다면?
        printf("Queue Memory Error!");
        exit(-1);
    }
    pq->rear = NextPosIdx(pq->rear);                // rear를 한 칸 이동
    pq->queArr[pq->rear] = data;                    // rear이 가리키는 곳에 데이터 저장
}

Data Dequeue(Queue *pq){
    if(QIsEmpty(pq)){
        printf("Queue Memory Error!");
        exit(-1);
    }
    pq->front =  NextPosIdx(pq->front);             // front를 한 칸 이동        
    return pq->queArr[pq->front];                   // front가 가리키는 데이터 반환
}

Data QPeek(Queue *pq){
    if(QIsEmpty(pq)){
        printf("Queue Memory Error!");
        exit(-1);
    }
    return pq->queArr[NextPosIdx(pq->front)];
}
